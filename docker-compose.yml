version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: emlakos-postgres
    environment:
      POSTGRES_DB: emlakos_turkiye
      POSTGRES_USER: emlakos_user
      POSTGRES_PASSWORD: emlakos_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - emlakos-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: emlakos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - emlakos-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # API Gateway (Go)
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: emlakos-api-gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=emlakos_turkiye
      - DB_USER=emlakos_user
      - DB_PASSWORD=emlakos_password_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=emlakos_jwt_secret_key_2024_super_secure
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      - postgres
      - redis
    networks:
      - emlakos-network
    restart: unless-stopped

  # User Service (Go)
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: emlakos-user-service
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=emlakos_turkiye
      - DB_USER=emlakos_user
      - DB_PASSWORD=emlakos_password_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=emlakos_jwt_secret_key_2024_super_secure
    depends_on:
      - postgres
      - redis
    networks:
      - emlakos-network
    restart: unless-stopped

  # Listing Service (Go)
  listing-service:
    build:
      context: ./backend/listing-service
      dockerfile: Dockerfile
    container_name: emlakos-listing-service
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=emlakos_turkiye
      - DB_USER=emlakos_user
      - DB_PASSWORD=emlakos_password_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - emlakos-network
    restart: unless-stopped

  # Messaging Service (Go)
  messaging-service:
    build:
      context: ./backend/messaging-service
      dockerfile: Dockerfile
    container_name: emlakos-messaging-service
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=emlakos_turkiye
      - DB_USER=emlakos_user
      - DB_PASSWORD=emlakos_password_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=emlakos_jwt_secret_key_2024_super_secure
    depends_on:
      - postgres
      - redis
    networks:
      - emlakos-network
    restart: unless-stopped

  # Notification Service (Go)
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: emlakos-notification-service
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=emlakos_turkiye
      - DB_USER=emlakos_user
      - DB_PASSWORD=emlakos_password_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=notifications@emlakos-turkiye.com
      - SMTP_PASSWORD=your_smtp_password
    depends_on:
      - postgres
      - redis
    networks:
      - emlakos-network
    restart: unless-stopped

  # AI Valuation Service (Python)
  ai-valuation-service:
    build:
      context: ./backend/ai-valuation-service
      dockerfile: Dockerfile
    container_name: emlakos-ai-valuation
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=emlakos_turkiye
      - DB_USER=emlakos_user
      - DB_PASSWORD=emlakos_password_2024
      - MODEL_PATH=/app/models
    depends_on:
      - postgres
    networks:
      - emlakos-network
    restart: unless-stopped

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: emlakos-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - emlakos-network
    restart: unless-stopped

  # Kibana for Elasticsearch Management
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: emlakos-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - emlakos-network
    restart: unless-stopped

  # Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: emlakos-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - emlakos-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: emlakos-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - emlakos-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: emlakos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - user-service
      - listing-service
      - messaging-service
      - notification-service
      - ai-valuation-service
    networks:
      - emlakos-network
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile
    container_name: emlakos-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_MAP_TILE_URL=https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png
    depends_on:
      - api-gateway
    networks:
      - emlakos-network
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: emlakos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - emlakos-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: emlakos-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - emlakos-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  grafana_data:

networks:
  emlakos-network:
    driver: bridge
